# Program 1 (Из ПР №3  Академии TOP)
# Задача 1: Разработка программы для работы с финансами
""" Переход
"""
"""
Ситуация: мы задумались о том, как наш ежедневный расход и доход влияет 
на бюджет. Для более эффективного управления своими финансами, мы решили
разработать приложение, которое позволит нам отслеживать каждую финансовую операцию.

        Задача: разработать функционал на Python для учёта финансовых транзакций,
        который позволит пользователю вводить сумму и описание каждой транзакции,
        а затем сохранять эти данные в список.
    
"""
# # Создаем пустой список для хранения транзакций
# transactions = []
#
# # Запрашиваем у пользователя количество транзакций
# number_of_transactions = int(input("Введите количество транзакций, которое вы хотите добавить: "))
#
# # Ввод данных о каждой транзакции
# for _ in range(number_of_transactions):
#     amount = input("Введите сумму транзакции: ")
#     description = input("Введите описание транзакции: ")
#     # Формируем строку транзакции и добавляем в список
#     transaction = f"Сумма: {amount}, Описание: {description}"
#     transactions.append(transaction)
#
# # Выводим список всех транзакций
# print("\nСписок всех ваших транзакций:")
# for transaction in transactions:
#     print(transaction)


# ----------------------------------------------------------------------
# Program 2 (Из ПР №3  Академии TOP)
# Разработка программы для учёта расходов на питание
"""
Ситуация: ваш друг, стремясь экономить, решил начать контролировать свои
ежедневные расходы на питание. Он просит помочь ему с разработкой простого 
приложения, которое позволило бы ему записывать стоимость каждого приёма пищи.

      Задача 2: написать программу, которая позволит пользователю вести 
      учёт расходов на питание за определённый период.
      Программа должна предоставлять функционал для ввода стоимости и
      описания каждого приёма пищи и сохранения этих данных в список для
      последующего анализа.
"""
# # Создаем пустой список для хранения информации о расходах на питание
# meal_expenses = []
#
# # Запрашиваем у пользователя количество дней для учета
# days_count = int(input("На сколько дней вы хотите ввести расходы на питание? "))
#
# # Ввод данных о расходах на каждый день
# for i in range(1, days_count + 1):
#     cost = input(f"Введите стоимость приёма пищи за день {i}: ")
#     meal = input("Введите описание приёма пищи: ")
#     expense = f"День {i}: Стоимость - {cost}, Приём пищи - {meal}"
#     meal_expenses.append(expense)
#
# # Вывод информации о расходах
# print("\nВаш список расходов на питание:")
# for expense in meal_expenses:
#     print(expense)


# ----------------------------------------------------------------------
# Program 3 Prog 1 (1 Из ПР №3  Академии TOP)
# Задача 1: Разработка программы для создания списка фильмов
# Уровень 1: Базовый
"""
    Задача: создайте список любимых фильмов. Напишите программу, 
    которая выводит каждый фильм в списке с новой строки.

    Ваш список фильмов:
Фильм 1: Название фильма - Кулак дракона, Описание фильма - Брюс попал на остров
Фильм 2: Название фильма - Балканский рубеж, Описание фильма - События на балканах. Росспецназ.
Фильм 3: Название фильма - Путешествие на край вселенной, Описание фильма - Док. фильм про космос.    
"""
# # Создаем пустой список для хранения информации о любимых фильмах
# like_films = []
#
# # Запрашиваем у пользователя количество фильмов
# films_count = int(input("На сколько фильмов вы хотите ввести список? "))
#
# # Ввод данных о любимых фильмах
# for i in range(1, films_count + 1):
#     film = input(f"Введите название фильма {i}: ")
#     inf_film = input("Введите описание фильма: ")
#     Line = f"Фильм {i}: Название фильма - {film}, Описание фильма - {inf_film}"
#     like_films.append(Line)
#
# # Вывод информации о фильмах
# print("\nВаш список фильмов:")
# for Line in like_films:
#     print(Line)
#
# print(like_films)


# ----------------------------------------------------------------------
# Program 4 Prog 2 (1 Из ПР №3  Академии TOP)
# Задача 2: Разработка программы для создания списка фильмов
# Уровень 2: Средний
"""
    Задача: напишите программу, которая позволяет пользователю добавлять
    и удалять фильмы из списка любимых фильмов.
    Пользователь должен ввести команду ‘add’ для добавления фильма 
    или ‘remove’ для его удаления. После каждого действия программа 
    должна выводить обновленный список.      
"""
# # Создаем пустой список для хранения информации о любимых фильмах
# like_films = []
#
# # Запрашиваем у пользователя количество фильмов
# films_count = int(input("На сколько фильмов вы хотите ввести список? "))
#
# # Ввод данных о любимых фильмах
# for i in range(1, films_count + 1):
#     film = input(f"Введите название фильма {i}: ")
#     inf_film = input("Введите описание фильма: ")
#     Line = f"Фильм {i}: Название фильма - {film}, Его описание - {inf_film}"
#     like_films.append(Line)
#
# # Вывод информации о фильмах
# print("\nВаш список фильмов:")
# for Line in like_films:
#     print(Line)
# print()

#
# like_films = [
#     'Фильм 1: Название фильма - Кулак ярости, Его описание - БрюсЛи',
#     'Фильм 2: Название фильма - Балканский рубеж, Его описание - Балканы',
#     'Фильм 3: Название фильма - Путешествие по Вселенной, Его описание - Космос'
# ]
# print("Базовый список фильмов:")
# print(like_films)
# print("Длина базового списка like_films =", len(like_films))
# print()
# count = 0  # Зададим счётчик попыток ввода
# while True:
#     command = input("Введите команду: ")  # Создание команды редактирования
#     if command == "add" or command == "remove":
#         break
#     else:
#         count_max = 3  # 3 попытки ввода команд
#         count += 1
#         if count_max - count == 0:
#             print(f"Работа программы завершена. Все {count_max} попытки ввода безуспешны.")
#             break
#         print("Команда может быть "
#               "только \"add\" или \"remove\". Попробуйте снова."
#               f" Осталось попыток ввода: {count_max - count}.")
#
# if command == "add":
#     for i in range(1, len(like_films) + 2):
#         if i == len(like_films) + 1:
#             film = input(f"Введите название фильма {i}: ")
#             inf_film = input("Введите описание фильма: ")
#             Line = f"Фильм {i}: Название фильма - {film}, Его описание - {inf_film}"
#             like_films.append(Line)
#             print(like_films)
# print()
# if command == "remove":
#     remove_film_number = int(input(f"Введите номер удаляемого фильма: "))
#     # for i in range(1, len(like_films) + 2):
#     #     if i == remove_film_number:
#     removed_like_films = like_films.pop(remove_film_number - 1)
#     print("Вы удалили следующий фильм:", removed_like_films)
#     # del like_films[1]
#     # print(like_films)
# print()
#
# print("Промежуточный список фильмов:")
# print(like_films)
# print("Длина промежуточного списка like_films =", len(like_films))
# print()
# """
# string[start:end]: извлекается последовательность символов начиная с
# индекса start по индекс end (не включая)
# Цикл пересборки списка фильмов выглядит так:
# """
# # Далее мы просто присваиваем значение индекса (i) и пересобираем строку по циклц
# # print(like_films)
# # print()
# # print("Длина списка like_films =", len(like_films))
# # print("Элемент списка like_films[0] =", like_films[0])
# # print("Элемент списка like_films[1] =", like_films[1])
# # print("Элемент списка like_films[2] =", like_films[2])
# for i in range(1, len(like_films) + 1):
#     str_lf = like_films[i - 1]  # Выделение элемента списка для его пересборки
#     str_1 = str_lf[:6]  # Выделение строки до числового символа
#     str_3 = str_lf[7:]  # Выделение строки после числового символа
#     str_2_new = str(i)  # Присвоение нового нового числового символа
#     str_lf = str_1 + str_2_new + str_3  # Конкатенация с переприсвоением в строку
#     like_films[i - 1] = str_lf # Переприсвоение любимого фильма в последовательный элемент словаря
#     if i == len(like_films):
#         print(i, ", т.е., i == len(like_films). ", "Крайний элемент списка:", sep="")
#         print(like_films[i - 1])
# print("Итоговый (пересобранный) список фильмов:")
# print(like_films)
# print("Длина итогового списка like_films =", len(like_films))


# ----------------------------------------------------------------------
# Program 5 Prog 3 (3 Из ПР №3  Академии TOP)
# Задача 3: Разработка программы для создания списка оценок
# Уровень 3: Продвинутый
"""
    Задача: напишите программу, которая позволяет пользователю 
    ввести список оценок, затем программа должна выводить 
    среднюю оценку и оценки выше средней.      
"""
# Создаем пустой список для хранения информации об оценках
# ratings_list = []
ratings_list_1 = []
# Запрашиваем у пользователя количество оценок
ratings_count = int(input("Сколько оценок вы хотите ввести? "))
# # Ввод данных (оценок)
for i in range(1, ratings_count + 1):
    rating = int(input(f"Введите оценку {i}: "))
    # inf_rating = input("Введите предмет оценки: ")
    # list_ = f"{i}: Оценка - {rating}, предмет - {inf_rating}"
    # ratings_list.append(list_)
    # list_1 = rating
    ratings_list_1.append(rating)

# Вывод информации об оценках
print("\nВаш список оценок:")
print(ratings_list_1)
# Вывод информации о среднем балле и оценках, выше среднего
# ratings_list  # a = [1, 3, 5, 7, 9]
# Начало с первого индекса
i = 0
# Цикл выполняется до последнего индекса (до len()-1)
av = 0  # Сумматор балла
while i < len(ratings_list_1):  # a
    av += ratings_list_1[i]
    # print(ratings_list_1[i], end='\t')
    i += 1
average = av / len(ratings_list_1)
print("Средний балл (average):", round(average))
print("Расфасовка списка, поехали:")
rating_above_average = []   # оценок, выше среднего
i = 0
# while i < len(ratings_list_1):
for i in range(ratings_count):  # len(ratings_list_1)
    print("Ин:", i, " Оц:", ratings_list_1[i], end="\t  ")
    if ratings_list_1[i] > average:
        rating_above_average.append(ratings_list_1[i])
    # i += 1
# [1, 3, 5, 7, 9]
# [2, 4, 7, 8, 9]
print("\nСписок оценок выше среднего:", rating_above_average)
print("\t Исходный список оценок:", ratings_list_1, '(для сравнения)')
"""
        Задача успешно решена
"""
